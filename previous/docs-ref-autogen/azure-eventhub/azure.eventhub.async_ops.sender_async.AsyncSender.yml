### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.async_ops.sender_async.AsyncSender.close_async
  - azure.eventhub.async_ops.sender_async.AsyncSender.has_started
  - azure.eventhub.async_ops.sender_async.AsyncSender.open_async
  - azure.eventhub.async_ops.sender_async.AsyncSender.reconnect_async
  - azure.eventhub.async_ops.sender_async.AsyncSender.send
  - azure.eventhub.async_ops.sender_async.AsyncSender.wait_async
  class: azure.eventhub.async_ops.sender_async.AsyncSender
  fullName: azure.eventhub.async_ops.sender_async.AsyncSender
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.eventhub.sender.Sender
  langs:
  - python
  module: azure.eventhub.async_ops.sender_async
  name: AsyncSender
  summary: Implements the async API of a Sender.
  syntax:
    content: AsyncSender(client, target, partition=None, send_timeout=60, keep_alive=None,
      auto_reconnect=True, loop=None)
  type: class
  uid: azure.eventhub.async_ops.sender_async.AsyncSender
- class: azure.eventhub.async_ops.sender_async.AsyncSender
  fullName: azure.eventhub.async_ops.sender_async.AsyncSender.close_async
  langs:
  - python
  module: azure.eventhub.async_ops.sender_async
  name: close_async(exception=None)
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  syntax:
    content: close_async(exception=None)
    parameters:
    - defaultValue: None
      description: 'An optional exception if the handler is closing

        due to an error.'
      id: exception
      type:
      - Exception
  type: method
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.close_async
- class: azure.eventhub.async_ops.sender_async.AsyncSender
  fullName: azure.eventhub.async_ops.sender_async.AsyncSender.has_started
  langs:
  - python
  module: azure.eventhub.async_ops.sender_async
  name: has_started()
  summary: 'Whether the handler has completed all start up processes such as

    establishing the connection, session, link and authentication, and

    is not ready to process messages.

    **This function is now deprecated and will be removed in v2.0+.**'
  syntax:
    content: has_started()
    parameters: []
    return:
      type:
      - bool
  type: method
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.has_started
- class: azure.eventhub.async_ops.sender_async.AsyncSender
  fullName: azure.eventhub.async_ops.sender_async.AsyncSender.open_async
  langs:
  - python
  module: azure.eventhub.async_ops.sender_async
  name: open_async()
  summary: 'Open the Sender using the supplied conneciton.

    If the handler has previously been redirected, the redirect

    context will be used to create a new handler before opening it.'
  syntax:
    content: open_async()
    parameters:
    - description: The underlying client shared connection.
      id: connection
  type: method
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.open_async
- class: azure.eventhub.async_ops.sender_async.AsyncSender
  fullName: azure.eventhub.async_ops.sender_async.AsyncSender.reconnect_async
  langs:
  - python
  module: azure.eventhub.async_ops.sender_async
  name: reconnect_async()
  summary: 'If the Receiver was disconnected from the service with

    a retryable error - attempt to reconnect.'
  syntax:
    content: reconnect_async()
    parameters: []
  type: method
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.reconnect_async
- class: azure.eventhub.async_ops.sender_async.AsyncSender
  fullName: azure.eventhub.async_ops.sender_async.AsyncSender.send
  langs:
  - python
  module: azure.eventhub.async_ops.sender_async
  name: send(event_data)
  summary: 'Sends an event data and asynchronously waits until

    acknowledgement is received or operation times out.'
  syntax:
    content: send(event_data)
    parameters:
    - description: The event to be sent.
      id: event_data
      type:
      - azure.eventhub.common.EventData
  type: method
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.send
- class: azure.eventhub.async_ops.sender_async.AsyncSender
  fullName: azure.eventhub.async_ops.sender_async.AsyncSender.wait_async
  langs:
  - python
  module: azure.eventhub.async_ops.sender_async
  name: wait_async()
  summary: Wait until all transferred events have been sent.
  syntax:
    content: wait_async()
    parameters: []
  type: method
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.wait_async
references:
- fullName: azure.eventhub.async_ops.sender_async.AsyncSender.close_async
  isExternal: false
  name: close_async(exception=None)
  parent: azure.eventhub.async_ops.sender_async.AsyncSender
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.close_async
- fullName: azure.eventhub.async_ops.sender_async.AsyncSender.has_started
  isExternal: false
  name: has_started()
  parent: azure.eventhub.async_ops.sender_async.AsyncSender
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.has_started
- fullName: azure.eventhub.async_ops.sender_async.AsyncSender.open_async
  isExternal: false
  name: open_async()
  parent: azure.eventhub.async_ops.sender_async.AsyncSender
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.open_async
- fullName: azure.eventhub.async_ops.sender_async.AsyncSender.reconnect_async
  isExternal: false
  name: reconnect_async()
  parent: azure.eventhub.async_ops.sender_async.AsyncSender
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.reconnect_async
- fullName: azure.eventhub.async_ops.sender_async.AsyncSender.send
  isExternal: false
  name: send(event_data)
  parent: azure.eventhub.async_ops.sender_async.AsyncSender
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.send
- fullName: azure.eventhub.async_ops.sender_async.AsyncSender.wait_async
  isExternal: false
  name: wait_async()
  parent: azure.eventhub.async_ops.sender_async.AsyncSender
  uid: azure.eventhub.async_ops.sender_async.AsyncSender.wait_async
