### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.sender.Sender.close
  - azure.eventhub.sender.Sender.get_handler_state
  - azure.eventhub.sender.Sender.has_started
  - azure.eventhub.sender.Sender.open
  - azure.eventhub.sender.Sender.reconnect
  - azure.eventhub.sender.Sender.send
  - azure.eventhub.sender.Sender.transfer
  - azure.eventhub.sender.Sender.wait
  class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub.sender
  name: Sender
  summary: Implements a Sender.
  syntax:
    content: Sender(client, target, partition=None, send_timeout=60, keep_alive=None,
      auto_reconnect=True)
  type: class
  uid: azure.eventhub.sender.Sender
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.close
  langs:
  - python
  module: azure.eventhub.sender
  name: close(exception=None)
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  syntax:
    content: close(exception=None)
    parameters:
    - defaultValue: None
      description: 'An optional exception if the handler is closing

        due to an error.'
      id: exception
      type:
      - Exception
  type: method
  uid: azure.eventhub.sender.Sender.close
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.get_handler_state
  langs:
  - python
  module: azure.eventhub.sender
  name: get_handler_state()
  summary: 'Get the state of the underlying handler with regards to start

    up processes.'
  syntax:
    content: get_handler_state()
    parameters: []
    return:
      type:
      - uamqp.constants.MessageSenderState
  type: method
  uid: azure.eventhub.sender.Sender.get_handler_state
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.has_started
  langs:
  - python
  module: azure.eventhub.sender
  name: has_started()
  summary: 'Whether the handler has completed all start up processes such as

    establishing the connection, session, link and authentication, and

    is not ready to process messages.

    **This function is now deprecated and will be removed in v2.0+.**'
  syntax:
    content: has_started()
    parameters: []
    return:
      type:
      - bool
  type: method
  uid: azure.eventhub.sender.Sender.has_started
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.open
  langs:
  - python
  module: azure.eventhub.sender
  name: open()
  summary: 'Open the Sender using the supplied conneciton.

    If the handler has previously been redirected, the redirect

    context will be used to create a new handler before opening it.'
  syntax:
    content: open()
    parameters:
    - description: The underlying client shared connection.
      id: connection
  type: method
  uid: azure.eventhub.sender.Sender.open
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.reconnect
  langs:
  - python
  module: azure.eventhub.sender
  name: reconnect()
  summary: 'If the Sender was disconnected from the service with

    a retryable error - attempt to reconnect.'
  syntax:
    content: reconnect()
    parameters: []
  type: method
  uid: azure.eventhub.sender.Sender.reconnect
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.send
  langs:
  - python
  module: azure.eventhub.sender
  name: send(event_data)
  summary: 'Sends an event data and blocks until acknowledgement is

    received or operation times out.'
  syntax:
    content: send(event_data)
    parameters:
    - description: The event to be sent.
      id: event_data
      type:
      - azure.eventhub.common.EventData
    return:
      description: The outcome of the message send.
      type:
      - uamqp.constants.MessageSendResult
  type: method
  uid: azure.eventhub.sender.Sender.send
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.transfer
  langs:
  - python
  module: azure.eventhub.sender
  name: transfer(event_data, callback=None)
  summary: Transfers an event data and notifies the callback when the operation is
    done.
  syntax:
    content: transfer(event_data, callback=None)
    parameters:
    - description: The event to be sent.
      id: event_data
      type:
      - azure.eventhub.common.EventData
    - defaultValue: None
      description: 'Callback to be run once the message has been send.

        This must be a function that accepts two arguments.'
      id: callback
      type:
      - callable[uamqp.constants.MessageSendResult, azure.eventhub.common.EventHubError]
  type: method
  uid: azure.eventhub.sender.Sender.transfer
- class: azure.eventhub.sender.Sender
  fullName: azure.eventhub.sender.Sender.wait
  langs:
  - python
  module: azure.eventhub.sender
  name: wait()
  summary: Wait until all transferred events have been sent.
  syntax:
    content: wait()
    parameters: []
  type: method
  uid: azure.eventhub.sender.Sender.wait
references:
- fullName: azure.eventhub.sender.Sender.close
  isExternal: false
  name: close(exception=None)
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.close
- fullName: azure.eventhub.sender.Sender.get_handler_state
  isExternal: false
  name: get_handler_state()
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.get_handler_state
- fullName: azure.eventhub.sender.Sender.has_started
  isExternal: false
  name: has_started()
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.has_started
- fullName: azure.eventhub.sender.Sender.open
  isExternal: false
  name: open()
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.open
- fullName: azure.eventhub.sender.Sender.reconnect
  isExternal: false
  name: reconnect()
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.reconnect
- fullName: azure.eventhub.sender.Sender.send
  isExternal: false
  name: send(event_data)
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.send
- fullName: azure.eventhub.sender.Sender.transfer
  isExternal: false
  name: transfer(event_data, callback=None)
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.transfer
- fullName: azure.eventhub.sender.Sender.wait
  isExternal: false
  name: wait()
  parent: azure.eventhub.sender.Sender
  uid: azure.eventhub.sender.Sender.wait
- fullName: callable[uamqp.constants.MessageSendResult, azure.eventhub.common.EventHubError]
  name: callable[MessageSendResult, EventHubError]
  spec.python:
  - fullName: callable
    name: callable
    uid: callable
  - fullName: '['
    name: '['
  - fullName: uamqp.constants.MessageSendResult
    name: MessageSendResult
    uid: uamqp.constants.MessageSendResult
  - fullName: ', '
    name: ', '
  - fullName: azure.eventhub.common.EventHubError
    name: EventHubError
    uid: azure.eventhub.common.EventHubError
  - fullName: ']'
    name: ']'
  uid: callable[uamqp.constants.MessageSendResult, azure.eventhub.common.EventHubError]
