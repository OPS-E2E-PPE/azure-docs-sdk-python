### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.filedatalake.DataLakeDirectoryClient.create_directory
  - azure.storage.filedatalake.DataLakeDirectoryClient.create_file
  - azure.storage.filedatalake.DataLakeDirectoryClient.create_sub_directory
  - azure.storage.filedatalake.DataLakeDirectoryClient.delete_directory
  - azure.storage.filedatalake.DataLakeDirectoryClient.delete_sub_directory
  - azure.storage.filedatalake.DataLakeDirectoryClient.from_connection_string
  - azure.storage.filedatalake.DataLakeDirectoryClient.get_directory_properties
  - azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client
  - azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client
  - azure.storage.filedatalake.DataLakeDirectoryClient.rename_directory
  class: azure.storage.filedatalake.DataLakeDirectoryClient
  example:
  - "Creating the DataLakeServiceClient from connection string.<!--[!code-python[Main](les\\\
    datalake_samples_instantiate_client.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\113\\\\azure-storage-file-datalake-12.0.1\\\
    \\samples\\\\datalake_samples_instantiate_client.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.storage.filedatalake import DataLakeDirectoryClient\n\
    \   DataLakeDirectoryClient.from_connection_string(connection_string, \"myfilesystem\"\
    , \"mydirectory\")\n\n   ````\n"
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.filedatalake._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.filedatalake._path_client.PathClient
  langs:
  - python
  module: azure.storage.filedatalake
  name: DataLakeDirectoryClient
  summary: 'A client to interact with the DataLake directory, even if the directory
    may not yet exist.


    For operations relating to a specific subdirectory or file under the directory,
    a directory client or file client

    can be retrieved using the <xref:azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client>
    or <xref:azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client> functions.'
  syntax:
    content: DataLakeDirectoryClient(account_url, file_system_name, directory_name,
      credential=None, **kwargs)
    parameters:
    - description: The URI to the storage account.
      id: account_url
      type:
      - str
    - description: The file system for the directory or files.
      id: file_system_name
      type:
      - str
    - description: The whole path of the directory. eg. {directory under file system}/{directory
        to interact with}
      id: directory_name
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        and account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
    variables:
    - description: The full endpoint URL to the file system, including SAS token if
        used.
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
  type: class
  uid: azure.storage.filedatalake.DataLakeDirectoryClient
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  example:
  - "Create directory.<!--[!code-python[Main](les\\datalake_samples_directory.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\113\\\\\
    azure-storage-file-datalake-12.0.1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   directory_client.create_directory()\n\
    \n   ````\n"
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.create_directory
  langs:
  - python
  module: azure.storage.filedatalake
  name: create_directory(metadata=None, **kwargs)
  namewithoutparameters: create_directory
  summary: Create a new directory.
  syntax:
    content: create_directory(metadata=None, **kwargs)
    parameters:
    - defaultValue: None
      description: Name-value pairs associated with the file as metadata.
      id: metadata
      type:
      - dict(str, str)
    return:
      description: response dict (Etag and last modified).
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_directory
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.create_file
  langs:
  - python
  module: azure.storage.filedatalake
  name: create_file(file, **kwargs)
  namewithoutparameters: create_file
  summary: Create a new file and return the file client to be interacted with.
  syntax:
    content: create_file(file, **kwargs)
    parameters:
    - description: 'The file with which to interact. This can either be the name of
        the file,

        or an instance of FileProperties.'
      id: file
      isRequired: true
      type:
      - str
      - azure.storage.filedatalake.FileProperties
    return:
      description: DataLakeFileClient
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_file
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.create_sub_directory
  langs:
  - python
  module: azure.storage.filedatalake
  name: create_sub_directory(sub_directory, metadata=None, **kwargs)
  namewithoutparameters: create_sub_directory
  summary: Create a subdirectory and return the subdirectory client to be interacted
    with.
  syntax:
    content: create_sub_directory(sub_directory, metadata=None, **kwargs)
    parameters:
    - description: 'The directory with which to interact. This can either be the name
        of the directory,

        or an instance of DirectoryProperties.'
      id: sub_directory
      isRequired: true
      type:
      - str
      - azure.storage.filedatalake.DirectoryProperties
    - defaultValue: None
      description: Name-value pairs associated with the file as metadata.
      id: metadata
      type:
      - dict(str, str)
    return:
      description: DataLakeDirectoryClient for the subdirectory.
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_sub_directory
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  example:
  - "Delete directory.<!--[!code-python[Main](les\\datalake_samples_directory.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\113\\\\\
    azure-storage-file-datalake-12.0.1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   new_directory.delete_directory()\n\
    \n   ````\n"
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.delete_directory
  langs:
  - python
  module: azure.storage.filedatalake
  name: delete_directory(**kwargs)
  namewithoutparameters: delete_directory
  summary: Marks the specified directory for deletion.
  syntax:
    content: delete_directory(**kwargs)
    parameters: []
    return:
      description: None
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.delete_directory
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.delete_sub_directory
  langs:
  - python
  module: azure.storage.filedatalake
  name: delete_sub_directory(sub_directory, **kwargs)
  namewithoutparameters: delete_sub_directory
  summary: Marks the specified subdirectory for deletion.
  syntax:
    content: delete_sub_directory(sub_directory, **kwargs)
    parameters:
    - description: 'The directory with which to interact. This can either be the name
        of the directory,

        or an instance of DirectoryProperties.'
      id: sub_directory
      isRequired: true
      type:
      - str
      - azure.storage.filedatalake.DirectoryProperties
    return:
      description: DataLakeDirectoryClient for the subdirectory
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.delete_sub_directory
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.from_connection_string
  langs:
  - python
  module: azure.storage.filedatalake
  name: from_connection_string(conn_str, file_system_name, directory_name, credential=None,
    **kwargs)
  namewithoutparameters: from_connection_string
  summary: 'Create DataLakeDirectoryClient from a Connection String.



    :return a DataLakeDirectoryClient

    :rtype ~azure.storage.filedatalake.DataLakeDirectoryClient'
  syntax:
    content: from_connection_string(conn_str, file_system_name, directory_name, credential=None,
      **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The name of file system to interact with.
      id: file_system_name
      isRequired: true
      type:
      - str
    - description: The name of directory to interact with. The directory is under
        file system.
      id: directory_name
      isRequired: true
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token, or the connection string already has
        shared

        access key values. The value can be a SAS token string, and account shared
        access

        key, or an instance of a TokenCredentials class from azure.identity.

        Credentials provided here will take precedence over those in the connection
        string.'
      id: credential
      isRequired: true
    - defaultValue: None
      id: credential
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.from_connection_string
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  example:
  - "Getting the properties for a file/directory.<!--[!code-python[Main](les\\datalake_samples_directory.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\113\\\\azure-storage-file-datalake-12.0.1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   props = new_directory.get_directory_properties()\n\
    \n   ````\n"
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.get_directory_properties
  langs:
  - python
  module: azure.storage.filedatalake
  name: get_directory_properties(**kwargs)
  namewithoutparameters: get_directory_properties
  summary: 'Returns all user-defined metadata, standard HTTP properties, and

    system properties for the directory. It does not return the content of the directory.'
  syntax:
    content: get_directory_properties(**kwargs)
    parameters: []
    return:
      type:
      - DirectoryProperties
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_directory_properties
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client
  langs:
  - python
  module: azure.storage.filedatalake
  name: get_file_client(file)
  namewithoutparameters: get_file_client
  summary: 'Get a client to interact with the specified file.


    The file need not already exist.'
  syntax:
    content: get_file_client(file)
    parameters:
    - description: 'The file with which to interact. This can either be the name of
        the file,

        or an instance of FileProperties. eg. directory/subdirectory/file'
      id: file
      isRequired: true
      type:
      - str
      - azure.storage.filedatalake.FileProperties
    return:
      description: A DataLakeFileClient.
      type:
      - azure.storage.filedatalake..DataLakeFileClient
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client
  langs:
  - python
  module: azure.storage.filedatalake
  name: get_sub_directory_client(sub_directory)
  namewithoutparameters: get_sub_directory_client
  summary: 'Get a client to interact with the specified subdirectory of the current
    directory.


    The sub subdirectory need not already exist.'
  syntax:
    content: get_sub_directory_client(sub_directory)
    parameters:
    - description: 'The directory with which to interact. This can either be the name
        of the directory,

        or an instance of DirectoryProperties.'
      id: sub_directory
      isRequired: true
      type:
      - str
      - azure.storage.filedatalake.DirectoryProperties
    return:
      description: A DataLakeDirectoryClient.
      type:
      - azure.storage.filedatalake.DataLakeDirectoryClient
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client
- class: azure.storage.filedatalake.DataLakeDirectoryClient
  example:
  - "Rename the source directory.<!--[!code-python[Main](les\\datalake_samples_directory.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\113\\\\azure-storage-file-datalake-12.0.1\\\\samples\\\\datalake_samples_directory.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   new_dir_name =\
    \ \"testdir2\"\n   print(\"Renaming the directory named '{}' to '{}'.\".format(dir_name,\
    \ new_dir_name))\n   new_directory = directory_client\\\n       .rename_directory(new_name=directory_client.file_system_name\
    \ + '/' + new_dir_name)\n\n   ````\n"
  fullName: azure.storage.filedatalake.DataLakeDirectoryClient.rename_directory
  langs:
  - python
  module: azure.storage.filedatalake
  name: rename_directory(new_name, **kwargs)
  namewithoutparameters: rename_directory
  summary: Rename the source directory.
  syntax:
    content: rename_directory(new_name, **kwargs)
    parameters:
    - description: 'the new directory name the user want to rename to.

        The value must have the following format: "{filesystem}/{directory}/{subdirectory}".'
      id: new_name
      isRequired: true
      type:
      - str
    return:
      description: DataLakeDirectoryClient
  type: method
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.rename_directory
references:
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.create_directory
  isExternal: false
  name: create_directory(metadata=None, **kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_directory
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.create_file
  isExternal: false
  name: create_file(file, **kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_file
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.create_sub_directory
  isExternal: false
  name: create_sub_directory(sub_directory, metadata=None, **kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.create_sub_directory
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.delete_directory
  isExternal: false
  name: delete_directory(**kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.delete_directory
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.delete_sub_directory
  isExternal: false
  name: delete_sub_directory(sub_directory, **kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.delete_sub_directory
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, file_system_name, directory_name, credential=None,
    **kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.from_connection_string
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.get_directory_properties
  isExternal: false
  name: get_directory_properties(**kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_directory_properties
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client
  isExternal: false
  name: get_file_client(file)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_file_client
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client
  isExternal: false
  name: get_sub_directory_client(sub_directory)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.get_sub_directory_client
- fullName: azure.storage.filedatalake.DataLakeDirectoryClient.rename_directory
  isExternal: false
  name: rename_directory(new_name, **kwargs)
  parent: azure.storage.filedatalake.DataLakeDirectoryClient
  uid: azure.storage.filedatalake.DataLakeDirectoryClient.rename_directory
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
