### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.client.EventHubClient.add_epoch_receiver
  - azure.eventhub.client.EventHubClient.add_receiver
  - azure.eventhub.client.EventHubClient.add_sender
  - azure.eventhub.client.EventHubClient.create_properties
  - azure.eventhub.client.EventHubClient.from_connection_string
  - azure.eventhub.client.EventHubClient.from_iothub_connection_string
  - azure.eventhub.client.EventHubClient.from_sas_token
  - azure.eventhub.client.EventHubClient.get_eventhub_info
  - azure.eventhub.client.EventHubClient.run
  - azure.eventhub.client.EventHubClient.stop
  class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub.client
  name: EventHubClient
  summary: 'The EventHubClient class defines a high level interface for sending

    events to and receiving events from the Azure Event Hubs service.'
  syntax:
    content: EventHubClient(address, username=None, password=None, debug=False, http_proxy=None,
      auth_timeout=60, sas_token=None)
  type: class
  uid: azure.eventhub.client.EventHubClient
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.add_epoch_receiver
  langs:
  - python
  module: azure.eventhub.client
  name: add_epoch_receiver(consumer_group, partition, epoch, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True)
  summary: 'Add a receiver to the client with an epoch value. Only a single epoch
    receiver

    can connect to a partition at any given time - additional epoch receivers must
    have

    a higher epoch value or they will be rejected. If a 2nd epoch receiver has

    connected, the first will be closed.'
  syntax:
    content: add_epoch_receiver(consumer_group, partition, epoch, prefetch=300, operation=None,
      keep_alive=30, auto_reconnect=True)
    parameters:
    - description: The name of the consumer group.
      id: consumer_group
      type:
      - str
    - description: The ID of the partition.
      id: partition
      type:
      - str
    - description: The epoch value for the receiver.
      id: epoch
      type:
      - int
    - defaultValue: '300'
      description: The message prefetch count of the receiver. Default is 300.
      id: prefetch
      type:
      - int
    - defaultValue: None
      id: operation
    - defaultValue: '30'
      id: keep_alive
    - defaultValue: 'True'
      id: auto_reconnect
    return:
      type:
      - azure.eventhub.receiver.Receiver
  type: method
  uid: azure.eventhub.client.EventHubClient.add_epoch_receiver
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.add_receiver
  langs:
  - python
  module: azure.eventhub.client
  name: add_receiver(consumer_group, partition, offset=None, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True)
  summary: Add a receiver to the client for a particular consumer group and partition.
  syntax:
    content: add_receiver(consumer_group, partition, offset=None, prefetch=300, operation=None,
      keep_alive=30, auto_reconnect=True)
    parameters:
    - description: The name of the consumer group.
      id: consumer_group
      type:
      - str
    - description: The ID of the partition.
      id: partition
      type:
      - str
    - defaultValue: None
      description: The offset from which to start receiving.
      id: offset
      type:
      - azure.eventhub.common.Offset
    - defaultValue: '300'
      description: The message prefetch count of the receiver. Default is 300.
      id: prefetch
      type:
      - int
    - defaultValue: None
      id: operation
    - defaultValue: '30'
      id: keep_alive
    - defaultValue: 'True'
      id: auto_reconnect
    return:
      type:
      - azure.eventhub.receiver.Receiver
  type: method
  uid: azure.eventhub.client.EventHubClient.add_receiver
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.add_sender
  langs:
  - python
  module: azure.eventhub.client
  name: add_sender(partition=None, operation=None, send_timeout=60, keep_alive=30,
    auto_reconnect=True)
  summary: Add a sender to the client to EventData object to an EventHub.
  syntax:
    content: add_sender(partition=None, operation=None, send_timeout=60, keep_alive=30,
      auto_reconnect=True)
    parameters:
    - defaultValue: None
      description: 'Optionally specify a particular partition to send to.

        If omitted, the events will be distributed to available partitions via

        round-robin.'
      id: partition
    - defaultValue: None
      description: 'The timeout in seconds for an individual event to be sent from
        the time that it is

        queued. Default value is 60 seconds. If set to 0, there will be no timeout.'
      id: send_timeout
      type:
      - int
    - defaultValue: '60'
      description: 'The time interval in seconds between pinging the connection to
        keep it alive during

        periods of inactivity. The default value is 30 seconds. If set to *None*,
        the connection will not

        be pinged.'
      id: keep_alive
      type:
      - int
    - defaultValue: '30'
      description: 'Whether to automatically reconnect the sender if a retryable error
        occurs.

        Default value is *True*.'
      id: auto_reconnect
    - defaultValue: 'True'
      id: auto_reconnect
    return:
      type:
      - azure.eventhub.sender.Sender
  type: method
  uid: azure.eventhub.client.EventHubClient.add_sender
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.create_properties
  langs:
  - python
  module: azure.eventhub.client
  name: create_properties()
  summary: 'Format the properties with which to instantiate the connection.

    This acts like a user agent over HTTP.'
  syntax:
    content: create_properties()
    parameters: []
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.client.EventHubClient.create_properties
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.from_connection_string
  langs:
  - python
  module: azure.eventhub.client
  name: from_connection_string(conn_str, eventhub=None, **kwargs)
  summary: Create an EventHubClient from a connection string.
  syntax:
    content: from_connection_string(conn_str, eventhub=None, **kwargs)
    parameters:
    - description: The connection string.
      id: conn_str
      type:
      - str
    - description: 'The name of the EventHub, if the EntityName is

        not included in the connection string.'
      id: eventhub
      type:
      - str
    - defaultValue: None
      description: 'Whether to output network trace logs to the logger. Default

        is *False*.'
      id: debug
      type:
      - bool
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: ''proxy_hostname'' (str value) and ''proxy_port'' (int value).

        Additionally the following keys may also be present: ''username'', ''password''.'
      id: http_proxy
      type:
      - dict[str, Any]
    - description: 'The time in seconds to wait for a token to be authorized by the
        service.

        The default value is 60 seconds. If set to 0, no timeout will be enforced
        from the client.'
      id: auth_timeout
      type:
      - int
  type: method
  uid: azure.eventhub.client.EventHubClient.from_connection_string
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.from_iothub_connection_string
  langs:
  - python
  module: azure.eventhub.client
  name: from_iothub_connection_string(conn_str, **kwargs)
  summary: Create an EventHubClient from an IoTHub connection string.
  syntax:
    content: from_iothub_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string.
      id: conn_str
      type:
      - str
    - description: 'Whether to output network trace logs to the logger. Default

        is *False*.'
      id: debug
      type:
      - bool
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: ''proxy_hostname'' (str value) and ''proxy_port'' (int value).

        Additionally the following keys may also be present: ''username'', ''password''.'
      id: http_proxy
      type:
      - dict[str, Any]
    - description: 'The time in seconds to wait for a token to be authorized by the
        service.

        The default value is 60 seconds. If set to 0, no timeout will be enforced
        from the client.'
      id: auth_timeout
      type:
      - int
  type: method
  uid: azure.eventhub.client.EventHubClient.from_iothub_connection_string
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.from_sas_token
  langs:
  - python
  module: azure.eventhub.client
  name: from_sas_token(address, sas_token, eventhub=None, **kwargs)
  summary: Create an EventHubClient from an existing auth token or token generator.
  syntax:
    content: from_sas_token(address, sas_token, eventhub=None, **kwargs)
    parameters:
    - description: The Event Hub address URL
      id: address
      type:
      - str
    - description: 'A SAS token or function that returns a SAS token. If a function
        is supplied,

        it will be used to retrieve subsequent tokens in the case of token expiry.
        The function should

        take no arguments.'
      id: sas_token
      type:
      - str
      - callable
    - description: The name of the EventHub, if not already included in the address
        URL.
      id: eventhub
      type:
      - str
    - defaultValue: None
      description: 'Whether to output network trace logs to the logger. Default

        is *False*.'
      id: debug
      type:
      - bool
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: ''proxy_hostname'' (str value) and ''proxy_port'' (int value).

        Additionally the following keys may also be present: ''username'', ''password''.'
      id: http_proxy
      type:
      - dict[str, Any]
    - description: 'The time in seconds to wait for a token to be authorized by the
        service.

        The default value is 60 seconds. If set to 0, no timeout will be enforced
        from the client.'
      id: auth_timeout
      type:
      - int
  type: method
  uid: azure.eventhub.client.EventHubClient.from_sas_token
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.get_eventhub_info
  langs:
  - python
  module: azure.eventhub.client
  name: get_eventhub_info()
  summary: "Get details on the specified EventHub.\nKeys in the details dictionary\
    \ include:\n\n\n   -'name'\n   -'type'\n   -'created_at'\n   -'partition_count'\n\
    \   -'partition_ids'"
  syntax:
    content: get_eventhub_info()
    parameters: []
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.client.EventHubClient.get_eventhub_info
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.run
  langs:
  - python
  module: azure.eventhub.client
  name: run()
  summary: 'Run the EventHubClient in blocking mode.

    Opens the connection and starts running all Sender/Receiver clients.

    Returns a list of the start up results. For a succcesful client start the

    result will be *None*, otherwise the exception raised.

    If all clients failed to start, then run will fail, shut down the connection

    and raise an exception.

    If at least one client starts up successfully the run command will succeed.'
  syntax:
    content: run()
    parameters: []
    return:
      type:
      - list[azure.eventhub.common.EventHubError]
  type: method
  uid: azure.eventhub.client.EventHubClient.run
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.stop
  langs:
  - python
  module: azure.eventhub.client
  name: stop()
  summary: Stop the EventHubClient and all its Sender/Receiver clients.
  syntax:
    content: stop()
    parameters: []
  type: method
  uid: azure.eventhub.client.EventHubClient.stop
references:
- fullName: azure.eventhub.client.EventHubClient.add_epoch_receiver
  isExternal: false
  name: add_epoch_receiver(consumer_group, partition, epoch, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True)
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.add_epoch_receiver
- fullName: azure.eventhub.client.EventHubClient.add_receiver
  isExternal: false
  name: add_receiver(consumer_group, partition, offset=None, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True)
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.add_receiver
- fullName: azure.eventhub.client.EventHubClient.add_sender
  isExternal: false
  name: add_sender(partition=None, operation=None, send_timeout=60, keep_alive=30,
    auto_reconnect=True)
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.add_sender
- fullName: azure.eventhub.client.EventHubClient.create_properties
  isExternal: false
  name: create_properties()
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.create_properties
- fullName: azure.eventhub.client.EventHubClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, eventhub=None, **kwargs)
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.from_connection_string
- fullName: azure.eventhub.client.EventHubClient.from_iothub_connection_string
  isExternal: false
  name: from_iothub_connection_string(conn_str, **kwargs)
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.from_iothub_connection_string
- fullName: azure.eventhub.client.EventHubClient.from_sas_token
  isExternal: false
  name: from_sas_token(address, sas_token, eventhub=None, **kwargs)
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.from_sas_token
- fullName: azure.eventhub.client.EventHubClient.get_eventhub_info
  isExternal: false
  name: get_eventhub_info()
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.get_eventhub_info
- fullName: azure.eventhub.client.EventHubClient.run
  isExternal: false
  name: run()
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.run
- fullName: azure.eventhub.client.EventHubClient.stop
  isExternal: false
  name: stop()
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.stop
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: list[azure.eventhub.common.EventHubError]
  name: list[EventHubError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.common.EventHubError
    name: EventHubError
    uid: azure.eventhub.common.EventHubError
  - fullName: ']'
    name: ']'
  uid: list[azure.eventhub.common.EventHubError]
