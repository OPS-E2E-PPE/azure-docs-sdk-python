### YamlMime:PythonClass
uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
name: SchemaRegistryAvroSerializer
fullName: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer
module: azure.schemaregistry.serializer.avroserializer
inheritances:
- builtins.object
summary: 'SchemaRegistryAvroSerializer provides the ability to serialize and deserialize
  data according

  to the given avro schema. It would automatically register, get and cache the schema.'
constructor:
  syntax: SchemaRegistryAvroSerializer(schema_registry, schema_group, **kwargs)
  parameters:
  - name: schema_registry
    description: 'The schema registry client

      which is used to register schema and retrieve schema from the service.'
    isRequired: true
    types:
    - <xref:azure.schemaregistry.SchemaRegistryClient>
  - name: schema_group
    description: Schema group under which schema should be registered.
    isRequired: true
    types:
    - <xref:str>
  - name: codec
    description: The writer codec. If None, let the avro library decides.
    types:
    - <xref:str>
methods:
- uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.close
  name: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  signature: close()
- uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.deserialize
  name: deserialize
  summary: Decode bytes data.
  signature: deserialize(data, **kwargs)
  parameters:
  - name: data
    description: The bytes data needs to be decoded.
    isRequired: true
    types:
    - <xref:bytes>
  return:
    types:
    - <xref:Dict>[<xref:str>, <xref:Any>]
- uid: azure.schemaregistry.serializer.avroserializer.SchemaRegistryAvroSerializer.serialize
  name: serialize
  summary: 'Encode dict data with the given schema. The returns bytes are consisted
    of: The first 4 bytes

    denoting record format identifier. The following 32 bytes denoting schema id returned
    by schema registry

    service. The remaining bytes are the real data payload.'
  signature: serialize(data, schema, **kwargs)
  parameters:
  - name: data
    description: The dict data to be encoded.
    isRequired: true
  - name: schema
    description: The schema used to encode the data.
    isRequired: true
    types:
    - <xref:Union>[<xref:str>, <xref:bytes>]
