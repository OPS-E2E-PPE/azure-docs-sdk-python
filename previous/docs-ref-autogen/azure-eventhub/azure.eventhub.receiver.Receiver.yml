### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.receiver.Receiver.close
  - azure.eventhub.receiver.Receiver.get_handler_state
  - azure.eventhub.receiver.Receiver.has_started
  - azure.eventhub.receiver.Receiver.open
  - azure.eventhub.receiver.Receiver.queue_size
  - azure.eventhub.receiver.Receiver.receive
  - azure.eventhub.receiver.Receiver.reconnect
  - azure.eventhub.receiver.Receiver.timeout
  class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub.receiver
  name: Receiver
  summary: Implements a Receiver.
  syntax:
    content: Receiver(client, source, offset=None, prefetch=300, epoch=None, keep_alive=None,
      auto_reconnect=True)
  type: class
  uid: azure.eventhub.receiver.Receiver
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.close
  langs:
  - python
  module: azure.eventhub.receiver
  name: close(exception=None)
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  syntax:
    content: close(exception=None)
    parameters:
    - defaultValue: None
      description: 'An optional exception if the handler is closing

        due to an error.'
      id: exception
      type:
      - Exception
  type: method
  uid: azure.eventhub.receiver.Receiver.close
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.get_handler_state
  langs:
  - python
  module: azure.eventhub.receiver
  name: get_handler_state()
  summary: 'Get the state of the underlying handler with regards to start

    up processes.'
  syntax:
    content: get_handler_state()
    parameters: []
    return:
      type:
      - uamqp.constants.MessageReceiverState
  type: method
  uid: azure.eventhub.receiver.Receiver.get_handler_state
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.has_started
  langs:
  - python
  module: azure.eventhub.receiver
  name: has_started()
  summary: 'Whether the handler has completed all start up processes such as

    establishing the connection, session, link and authentication, and

    is not ready to process messages.

    **This function is now deprecated and will be removed in v2.0+.**'
  syntax:
    content: has_started()
    parameters: []
    return:
      type:
      - bool
  type: method
  uid: azure.eventhub.receiver.Receiver.has_started
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.open
  langs:
  - python
  module: azure.eventhub.receiver
  name: open()
  summary: 'Open the Receiver using the supplied conneciton.

    If the handler has previously been redirected, the redirect

    context will be used to create a new handler before opening it.'
  syntax:
    content: open()
    parameters:
    - description: The underlying client shared connection.
      id: connection
  type: method
  uid: azure.eventhub.receiver.Receiver.open
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.queue_size
  langs:
  - python
  module: azure.eventhub.receiver
  name: queue_size
  summary: The current size of the unprocessed Event queue.
  syntax:
    return:
      type:
      - int
  type: attribute
  uid: azure.eventhub.receiver.Receiver.queue_size
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.receive
  langs:
  - python
  module: azure.eventhub.receiver
  name: receive(max_batch_size=None, timeout=None)
  summary: Receive events from the EventHub.
  syntax:
    content: receive(max_batch_size=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'Receive a batch of events. Batch size will

        be up to the maximum specified, but will return as soon as service

        returns no new events. If combined with a timeout and no events are

        retrieve before the time, the result will be empty. If no batch

        size is supplied, the prefetch size will be the maximum.'
      id: max_batch_size
      type:
      - int
    - defaultValue: None
      id: timeout
    return:
      type:
      - list[azure.eventhub.common.EventData]
  type: method
  uid: azure.eventhub.receiver.Receiver.receive
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.reconnect
  langs:
  - python
  module: azure.eventhub.receiver
  name: reconnect()
  summary: 'If the Receiver was disconnected from the service with

    a retryable error - attempt to reconnect.'
  syntax:
    content: reconnect()
    parameters: []
  type: method
  uid: azure.eventhub.receiver.Receiver.reconnect
- class: azure.eventhub.receiver.Receiver
  fullName: azure.eventhub.receiver.Receiver.timeout
  langs:
  - python
  module: azure.eventhub.receiver
  name: timeout
  syntax:
    content: timeout = 0
  type: attribute
  uid: azure.eventhub.receiver.Receiver.timeout
references:
- fullName: azure.eventhub.receiver.Receiver.close
  isExternal: false
  name: close(exception=None)
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.close
- fullName: azure.eventhub.receiver.Receiver.get_handler_state
  isExternal: false
  name: get_handler_state()
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.get_handler_state
- fullName: azure.eventhub.receiver.Receiver.has_started
  isExternal: false
  name: has_started()
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.has_started
- fullName: azure.eventhub.receiver.Receiver.open
  isExternal: false
  name: open()
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.open
- fullName: azure.eventhub.receiver.Receiver.queue_size
  isExternal: false
  name: queue_size
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.queue_size
- fullName: azure.eventhub.receiver.Receiver.receive
  isExternal: false
  name: receive(max_batch_size=None, timeout=None)
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.receive
- fullName: azure.eventhub.receiver.Receiver.reconnect
  isExternal: false
  name: reconnect()
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.reconnect
- fullName: azure.eventhub.receiver.Receiver.timeout
  isExternal: false
  name: timeout
  parent: azure.eventhub.receiver.Receiver
  uid: azure.eventhub.receiver.Receiver.timeout
- fullName: list[azure.eventhub.common.EventData]
  name: list[EventData]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.common.EventData
    name: EventData
    uid: azure.eventhub.common.EventData
  - fullName: ']'
    name: ']'
  uid: list[azure.eventhub.common.EventData]
