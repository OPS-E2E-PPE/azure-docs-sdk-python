### YamlMime:PythonClass
uid: azure.ai.translation.document.DocumentTranslationClient
name: DocumentTranslationClient
fullName: azure.ai.translation.document.DocumentTranslationClient
module: azure.ai.translation.document
inheritances:
- builtins.object
constructor:
  syntax: DocumentTranslationClient(endpoint, credential, **kwargs)
methods:
- uid: azure.ai.translation.document.DocumentTranslationClient.cancel_job
  name: cancel_job
  summary: 'Cancel a currently processing or queued job.


    A job will not be cancelled if it is already completed, failed, or cancelling.

    All documents that have completed translation will not be cancelled and will be
    charged.

    If possible, all pending documents will be cancelled.'
  signature: cancel_job(job_id, **kwargs)
  parameters:
  - name: job_id
    description: The translation job ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.ai.translation.document.DocumentTranslationClient.close
  name: close
  summary: Close the <xref:azure.ai.translation.document.DocumentTranslationClient>
    session.
  signature: close()
- uid: azure.ai.translation.document.DocumentTranslationClient.create_translation_job
  name: create_translation_job
  summary: 'Create a document translation job which translates the document(s) in
    your source container

    to your TranslationTarget(s) in the given language.


    For supported languages and document formats, see the service documentation:

    [https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview](https://docs.microsoft.com/azure/cognitive-services/translator/document-translation/overview)'
  signature: create_translation_job(inputs, **kwargs)
  parameters:
  - name: inputs
    description: 'A list of translation inputs. Each individual input has a single

      source URL to documents and can contain multiple TranslationTargets (one for
      each language)

      for the destination to write translated documents.'
    isRequired: true
    types:
    - <xref:List>[<xref:azure.ai.translation.document.DocumentTranslationInput>]
  return:
    description: A JobStatusResult with information on the status of the translation
      job.
    types:
    - <xref:azure.ai.translation.document.JobStatusResult>
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "Create a translation job.<!--[!code-python[Main](les\\sample_check_document_statuses.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\77\\\\azure-ai-translation-document-1.0.0b1\\\\samples\\\\sample_check_document_statuses.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.translation.document import (\n\
    \       DocumentTranslationClient,\n       DocumentTranslationInput,\n       TranslationTarget\n\
    \   )\n\n   endpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\n \
    \  key = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\n   source_container_url\
    \ = os.environ[\"AZURE_SOURCE_CONTAINER_URL\"]\n   target_container_url = os.environ[\"\
    AZURE_TARGET_CONTAINER_URL\"]\n\n   client = DocumentTranslationClient(endpoint,\
    \ AzureKeyCredential(key))\n\n   job_result = client.create_translation_job(inputs=[\n\
    \           DocumentTranslationInput(\n               source_url=source_container_url,\n\
    \               targets=[\n                   TranslationTarget(\n           \
    \            target_url=target_container_url,\n                       language_code=\"\
    es\"\n                   )\n               ]\n           )\n       ]\n   )  #\
    \ type: JobStatusResult\n\n   ````\n"
- uid: azure.ai.translation.document.DocumentTranslationClient.get_document_formats
  name: get_document_formats
  summary: Get the list of the document formats supported by the Document Translation
    service.
  signature: get_document_formats(**kwargs)
  return:
    description: A list of supported document formats for translation.
    types:
    - <xref:List>[<xref:FileFormat>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
- uid: azure.ai.translation.document.DocumentTranslationClient.get_document_status
  name: get_document_status
  summary: Get the status of an individual document within a translation job.
  signature: get_document_status(job_id, document_id, **kwargs)
  parameters:
  - name: job_id
    description: The translation job ID.
    isRequired: true
    types:
    - <xref:str>
  - name: document_id
    description: The ID for the document.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A DocumentStatusResult with information on the status of the document.
    types:
    - <xref:azure.ai.translation.document.DocumentStatusResult>
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.ai.translation.document.DocumentTranslationClient.get_glossary_formats
  name: get_glossary_formats
  summary: Get the list of the glossary formats supported by the Document Translation
    service.
  signature: get_glossary_formats(**kwargs)
  return:
    description: A list of supported glossary formats.
    types:
    - <xref:List>[<xref:FileFormat>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
- uid: azure.ai.translation.document.DocumentTranslationClient.get_job_status
  name: get_job_status
  summary: 'Gets the status of a translation job.


    The status includes the overall job status, as well as a summary of

    the documents that are being translated as part of that translation job.'
  signature: get_job_status(job_id, **kwargs)
  parameters:
  - name: job_id
    description: The translation job ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A JobStatusResult with information on the status of the translation
      job.
    types:
    - <xref:azure.ai.translation.document.JobStatusResult>
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.ai.translation.document.DocumentTranslationClient.list_all_document_statuses
  name: list_all_document_statuses
  summary: List all the document statuses under a translation job.
  signature: list_all_document_statuses(job_id, **kwargs)
  parameters:
  - name: job_id
    description: The translation job ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ~azure.core.paging.ItemPaged[<xref:azure.ai.translation.document.DocumentStatusResult>]
    types:
    - <xref:azure.core.paging.ItemPaged>
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "List all the document statuses under the translation job.<!--[!code-python[Main](les\\\
    sample_create_translation_job.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\77\\\\azure-ai-translation-document-1.0.0b1\\\
    \\samples\\\\sample_create_translation_job.py\", \"xml:space\": \"preserve\",\
    \ \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   doc_results = client.list_all_document_statuses(job_result.id)\
    \  # type: ItemPaged[DocumentStatusResult]\n   for document in doc_results:\n\
    \       print(\"Document ID: {}\".format(document.id))\n       print(\"Document\
    \ status: {}\".format(document.status))\n       if document.status == \"Succeeded\"\
    :\n           print(\"Source document location: {}\".format(document.source_document_url))\n\
    \           print(\"Translated document location: {}\".format(document.translated_document_url))\n\
    \           print(\"Translated to language: {}\\n\".format(document.translate_to))\n\
    \       else:\n           print(\"Error Code: {}, Message: {}\\n\".format(document.error.code,\
    \ document.error.message))\n\n   ````\n"
- uid: azure.ai.translation.document.DocumentTranslationClient.list_submitted_jobs
  name: list_submitted_jobs
  summary: List all the submitted translation jobs under the Document Translation
    resource.
  signature: list_submitted_jobs(**kwargs)
  return:
    description: ~azure.core.paging.ItemPaged[<xref:azure.ai.translation.document.JobStatusResult>]
    types:
    - <xref:azure.core.paging.ItemPaged>
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "List all submitted jobs under the resource.<!--[!code-python[Main](les\\sample_list_all_submitted_jobs.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\77\\\\azure-ai-translation-document-1.0.0b1\\\\samples\\\\sample_list_all_submitted_jobs.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.translation.document import (\n\
    \       DocumentTranslationClient,\n   )\n\n   endpoint = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_DOCUMENT_TRANSLATION_KEY\"]\n\n   client = DocumentTranslationClient(endpoint,\
    \ AzureKeyCredential(key))\n   translation_jobs = client.list_submitted_jobs()\
    \  # type: ItemPaged[JobStatusResult]\n\n   for job in translation_jobs:\n   \
    \    if job.status == \"Running\":\n           job = client.wait_until_done(job.id)\n\
    \n       print(\"Job ID: {}\".format(job.id))\n       print(\"Job status: {}\"\
    .format(job.status))\n       print(\"Job created on: {}\".format(job.created_on))\n\
    \       print(\"Job last updated on: {}\".format(job.last_updated_on))\n     \
    \  print(\"Total number of translations on documents: {}\".format(job.documents_total_count))\n\
    \       print(\"Total number of characters charged: {}\".format(job.total_characters_charged))\n\
    \n       print(\"\\nOf total documents...\")\n       print(\"{} failed\".format(job.documents_failed_count))\n\
    \       print(\"{} succeeded\".format(job.documents_succeeded_count))\n      \
    \ print(\"{} cancelled\\n\".format(job.documents_cancelled_count))\n\n\n   ````\n"
- uid: azure.ai.translation.document.DocumentTranslationClient.wait_until_done
  name: wait_until_done
  summary: 'Wait until the translation job is done.


    A job is considered "done" when it reaches a terminal state like

    Succeeded, Failed, Cancelled.'
  signature: wait_until_done(job_id, **kwargs)
  parameters:
  - name: job_id
    description: The translation job ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A JobStatusResult with information on the status of the translation
      job.
    types:
    - <xref:azure.ai.translation.document.JobStatusResult>
  exceptions:
  - description: Will raise if validation fails on the input. E.g. insufficient permissions
      on the blob containers.
    type: ~azure.core.exceptions.HttpResponseError or ~azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Create a translation job and wait until it is done.<!--[!code-python[Main](les\\\
    sample_create_translation_job.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\77\\\\azure-ai-translation-document-1.0.0b1\\\
    \\samples\\\\sample_create_translation_job.py\", \"xml:space\": \"preserve\",\
    \ \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.ai.translation.document import (\n       DocumentTranslationClient,\n\
    \       DocumentTranslationInput,\n       TranslationTarget\n   )\n\n   endpoint\
    \ = os.environ[\"AZURE_DOCUMENT_TRANSLATION_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_DOCUMENT_TRANSLATION_KEY\"]\n   source_container_url = os.environ[\"AZURE_SOURCE_CONTAINER_URL\"\
    ]\n   target_container_url = os.environ[\"AZURE_TARGET_CONTAINER_URL\"]\n\n  \
    \ client = DocumentTranslationClient(endpoint, AzureKeyCredential(key))\n\n  \
    \ job = client.create_translation_job(inputs=[\n           DocumentTranslationInput(\n\
    \               source_url=source_container_url,\n               targets=[\n \
    \                  TranslationTarget(\n                       target_url=target_container_url,\n\
    \                       language_code=\"es\"\n                   )\n         \
    \      ]\n           )\n       ]\n   )  # type: JobStatusResult\n\n   job_result\
    \ = client.wait_until_done(job.id)  # type: JobStatusResult\n\n   print(\"Job\
    \ status: {}\".format(job_result.status))\n   print(\"Job created on: {}\".format(job_result.created_on))\n\
    \   print(\"Job last updated on: {}\".format(job_result.last_updated_on))\n  \
    \ print(\"Total number of translations on documents: {}\".format(job_result.documents_total_count))\n\
    \n   print(\"\\nOf total documents...\")\n   print(\"{} failed\".format(job_result.documents_failed_count))\n\
    \   print(\"{} succeeded\".format(job_result.documents_succeeded_count))\n\n \
    \  ````\n"
