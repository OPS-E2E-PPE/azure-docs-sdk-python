### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.async_ops.EventHubClientAsync.add_async_epoch_receiver
  - azure.eventhub.async_ops.EventHubClientAsync.add_async_receiver
  - azure.eventhub.async_ops.EventHubClientAsync.add_async_sender
  - azure.eventhub.async_ops.EventHubClientAsync.get_eventhub_info_async
  - azure.eventhub.async_ops.EventHubClientAsync.run_async
  - azure.eventhub.async_ops.EventHubClientAsync.stop_async
  class: azure.eventhub.async_ops.EventHubClientAsync
  fullName: azure.eventhub.async_ops.EventHubClientAsync
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.eventhub.client.EventHubClient
  langs:
  - python
  module: azure.eventhub.async_ops
  name: EventHubClientAsync
  summary: 'The EventHubClient class defines a high level interface for asynchronously

    sending events to and receiving events from the Azure Event Hubs service.'
  syntax:
    content: EventHubClientAsync(address, username=None, password=None, debug=False,
      http_proxy=None, auth_timeout=60, sas_token=None)
  type: class
  uid: azure.eventhub.async_ops.EventHubClientAsync
- class: azure.eventhub.async_ops.EventHubClientAsync
  fullName: azure.eventhub.async_ops.EventHubClientAsync.add_async_epoch_receiver
  langs:
  - python
  module: azure.eventhub.async_ops
  name: add_async_epoch_receiver(consumer_group, partition, epoch, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True, loop=None)
  summary: 'Add an async receiver to the client with an epoch value. Only a single
    epoch receiver

    can connect to a partition at any given time - additional epoch receivers must
    have

    a higher epoch value or they will be rejected. If a 2nd epoch receiver has

    connected, the first will be closed.'
  syntax:
    content: add_async_epoch_receiver(consumer_group, partition, epoch, prefetch=300,
      operation=None, keep_alive=30, auto_reconnect=True, loop=None)
    parameters:
    - description: The name of the consumer group.
      id: consumer_group
      type:
      - str
    - description: The ID of the partition.
      id: partition
      type:
      - str
    - description: The epoch value for the receiver.
      id: epoch
      type:
      - int
    - defaultValue: '300'
      description: The message prefetch count of the receiver. Default is 300.
      id: prefetch
      type:
      - int
    - defaultValue: None
      id: operation
    - defaultValue: '30'
      id: keep_alive
    - defaultValue: 'True'
      id: auto_reconnect
    - defaultValue: None
      id: loop
    return:
      type:
      - azure.eventhub.async_ops.receiver_async.ReceiverAsync
  type: method
  uid: azure.eventhub.async_ops.EventHubClientAsync.add_async_epoch_receiver
- class: azure.eventhub.async_ops.EventHubClientAsync
  fullName: azure.eventhub.async_ops.EventHubClientAsync.add_async_receiver
  langs:
  - python
  module: azure.eventhub.async_ops
  name: add_async_receiver(consumer_group, partition, offset=None, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True, loop=None)
  summary: Add an async receiver to the client for a particular consumer group and
    partition.
  syntax:
    content: add_async_receiver(consumer_group, partition, offset=None, prefetch=300,
      operation=None, keep_alive=30, auto_reconnect=True, loop=None)
    parameters:
    - description: The name of the consumer group.
      id: consumer_group
      type:
      - str
    - description: The ID of the partition.
      id: partition
      type:
      - str
    - defaultValue: None
      description: The offset from which to start receiving.
      id: offset
      type:
      - azure.eventhub.common.Offset
    - defaultValue: '300'
      description: The message prefetch count of the receiver. Default is 300.
      id: prefetch
      type:
      - int
    - defaultValue: None
      id: operation
    - defaultValue: '30'
      id: keep_alive
    - defaultValue: 'True'
      id: auto_reconnect
    - defaultValue: None
      id: loop
    return:
      type:
      - azure.eventhub.async_ops.receiver_async.ReceiverAsync
  type: method
  uid: azure.eventhub.async_ops.EventHubClientAsync.add_async_receiver
- class: azure.eventhub.async_ops.EventHubClientAsync
  fullName: azure.eventhub.async_ops.EventHubClientAsync.add_async_sender
  langs:
  - python
  module: azure.eventhub.async_ops
  name: add_async_sender(partition=None, operation=None, send_timeout=60, keep_alive=30,
    auto_reconnect=True, loop=None)
  summary: 'Add an async sender to the client to send ~azure.eventhub.common.EventData
    object

    to an EventHub.'
  syntax:
    content: add_async_sender(partition=None, operation=None, send_timeout=60, keep_alive=30,
      auto_reconnect=True, loop=None)
    parameters:
    - defaultValue: None
      description: 'Optionally specify a particular partition to send to.

        If omitted, the events will be distributed to available partitions via

        round-robin.'
      id: partition
      type:
      - str
    - defaultValue: None
      description: 'The timeout in seconds for an individual event to be sent from
        the time that it is

        queued. Default value is 60 seconds. If set to 0, there will be no timeout.'
      id: send_timeout
      type:
      - int
    - defaultValue: '60'
      description: 'The time interval in seconds between pinging the connection to
        keep it alive during

        periods of inactivity. The default value is 30 seconds. If set to *None*,
        the connection will not

        be pinged.'
      id: keep_alive
      type:
      - int
    - defaultValue: '30'
      description: 'Whether to automatically reconnect the sender if a retryable error
        occurs.

        Default value is *True*.'
      id: auto_reconnect
      type:
      - bool
    - defaultValue: 'True'
      id: auto_reconnect
    - defaultValue: None
      id: loop
    return:
      type:
      - azure.eventhub.async_ops.sender_async.SenderAsync
  type: method
  uid: azure.eventhub.async_ops.EventHubClientAsync.add_async_sender
- class: azure.eventhub.async_ops.EventHubClientAsync
  fullName: azure.eventhub.async_ops.EventHubClientAsync.get_eventhub_info_async
  langs:
  - python
  module: azure.eventhub.async_ops
  name: get_eventhub_info_async()
  summary: Get details on the specified EventHub async.
  syntax:
    content: get_eventhub_info_async()
    parameters: []
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.async_ops.EventHubClientAsync.get_eventhub_info_async
- class: azure.eventhub.async_ops.EventHubClientAsync
  fullName: azure.eventhub.async_ops.EventHubClientAsync.run_async
  langs:
  - python
  module: azure.eventhub.async_ops
  name: run_async()
  summary: 'Run the EventHubClient asynchronously.

    Opens the connection and starts running all AsyncSender/AsyncReceiver clients.

    Returns a list of the start up results. For a succcesful client start the

    result will be *None*, otherwise the exception raised.

    If all clients failed to start, then run will fail, shut down the connection

    and raise an exception.

    If at least one client starts up successfully the run command will succeed.'
  syntax:
    content: run_async()
    parameters: []
    return:
      type:
      - list[azure.eventhub.common.EventHubError]
  type: method
  uid: azure.eventhub.async_ops.EventHubClientAsync.run_async
- class: azure.eventhub.async_ops.EventHubClientAsync
  fullName: azure.eventhub.async_ops.EventHubClientAsync.stop_async
  langs:
  - python
  module: azure.eventhub.async_ops
  name: stop_async()
  summary: Stop the EventHubClient and all its Sender/Receiver clients.
  syntax:
    content: stop_async()
    parameters: []
  type: method
  uid: azure.eventhub.async_ops.EventHubClientAsync.stop_async
references:
- fullName: azure.eventhub.async_ops.EventHubClientAsync.add_async_epoch_receiver
  isExternal: false
  name: add_async_epoch_receiver(consumer_group, partition, epoch, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True, loop=None)
  parent: azure.eventhub.async_ops.EventHubClientAsync
  uid: azure.eventhub.async_ops.EventHubClientAsync.add_async_epoch_receiver
- fullName: azure.eventhub.async_ops.EventHubClientAsync.add_async_receiver
  isExternal: false
  name: add_async_receiver(consumer_group, partition, offset=None, prefetch=300, operation=None,
    keep_alive=30, auto_reconnect=True, loop=None)
  parent: azure.eventhub.async_ops.EventHubClientAsync
  uid: azure.eventhub.async_ops.EventHubClientAsync.add_async_receiver
- fullName: azure.eventhub.async_ops.EventHubClientAsync.add_async_sender
  isExternal: false
  name: add_async_sender(partition=None, operation=None, send_timeout=60, keep_alive=30,
    auto_reconnect=True, loop=None)
  parent: azure.eventhub.async_ops.EventHubClientAsync
  uid: azure.eventhub.async_ops.EventHubClientAsync.add_async_sender
- fullName: azure.eventhub.async_ops.EventHubClientAsync.get_eventhub_info_async
  isExternal: false
  name: get_eventhub_info_async()
  parent: azure.eventhub.async_ops.EventHubClientAsync
  uid: azure.eventhub.async_ops.EventHubClientAsync.get_eventhub_info_async
- fullName: azure.eventhub.async_ops.EventHubClientAsync.run_async
  isExternal: false
  name: run_async()
  parent: azure.eventhub.async_ops.EventHubClientAsync
  uid: azure.eventhub.async_ops.EventHubClientAsync.run_async
- fullName: azure.eventhub.async_ops.EventHubClientAsync.stop_async
  isExternal: false
  name: stop_async()
  parent: azure.eventhub.async_ops.EventHubClientAsync
  uid: azure.eventhub.async_ops.EventHubClientAsync.stop_async
- fullName: list[azure.eventhub.common.EventHubError]
  name: list[EventHubError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.common.EventHubError
    name: EventHubError
    uid: azure.eventhub.common.EventHubError
  - fullName: ']'
    name: ']'
  uid: list[azure.eventhub.common.EventHubError]
